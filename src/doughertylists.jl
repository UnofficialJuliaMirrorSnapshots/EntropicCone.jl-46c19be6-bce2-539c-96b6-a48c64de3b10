export getdoughertylist4copyvars3steps

const doughertylist4copyvars3steps = [
    2 4 2 1 3 1 0 2 0;
    2 3 3 1 5 2 0 2 0;
    3 6 3 1 6 3 0 3 0;
    2 4 2 1 2 0 0 2 3;
    2 3 3 2 2 0 0 2 0;
    4 6 4 3 4 2 1 4 0;
    2 5 2 1 2 0 0 2 0;
    2 4 3 1 2 0 0 2 0;
    2 4 1 2 2 3 0 2 0;
    3 7 4 1 4 1 0 3 0;
    4 6 11 3 6 2 0 4 0;
    3 6 3 1 4 1 0 3 5;
    7 8 12 12 7 5 5 7 0;
    5 14 9 1 7 2 0 5 0;
    6 7 11 11 6 3 3 6 0;
    3 4 6 3 6 2 0 3 0;
    11 23 28 3 11 7 5 11 0;
    5 6 8 7 5 3 2 5 0;
    6 12 6 3 6 4 3 6 0;
    4 5 16 4 10 6 0 4 0;
    3 6 5 1 5 3 0 3 0;
    4 13 7 1 4 2 2 4 0;
    4 5 7 6 4 1 1 4 0;
    4 8 4 1 10 6 0 4 0;
    5 16 13 1 5 1 1 5 0;
    5 6 11 11 5 1 1 5 0;
    2 3 4 1 4 5 0 2 0;
    4 5 6 4 4 2 4 4 0;
    4 7 4 2 4 1 1 4 7;
    2 3 3 1 2 3 2 2 0;
    4 10 2 3 9 9 0 4 0;
    4 7 3 4 5 5 0 4 0;
    3 5 4 2 3 0 0 3 4;
    5 14 11 1 5 2 2 5 0;
    6 15 10 2 6 0 0 6 11;
    11 31 18 3 13 4 0 11 0;
    18 38 31 6 18 6 6 18 0;
    4 9 3 2 8 4 0 4 0;
    5 12 3 3 10 9 0 5 0;
    8 19 6 4 9 14 0 8 0;
    3 5 4 2 4 1 0 3 0;
    7 19 8 1 9 8 2 7 0;
    6 16 2 9 6 11 0 6 0;
    7 8 11 11 7 7 7 7 0;
    5 8 10 3 5 1 1 5 0;
    4 10 10 1 4 1 4 4 0;
    8 9 14 14 8 8 8 8 0;
    3 5 4 1 8 5 0 3 0;
    6 11 10 2 6 6 9 6 0;
    7 19 11 2 7 5 10 7 0;
    6 13 10 2 6 2 2 6 0;
    9 12 16 7 9 13 11 9 0;
    7 8 16 16 7 3 3 7 0;
    5 9 4 4 5 3 1 5 0;
    8 17 7 3 16 8 0 8 0;
    3 9 2 2 3 0 0 3 0;
    9 17 15 3 9 15 5 9 0;
    3 4 5 4 4 1 0 3 0;
    7 16 12 2 7 4 3 7 0;
    3 5 6 2 3 0 0 3 0;
    6 11 10 2 6 9 4 6 0;
    6 7 13 13 6 2 2 6 0;
    10 23 16 3 10 5 5 10 0;
    4 5 9 6 6 3 0 4 0;
    9 19 8 4 15 7 0 9 0;
    10 11 22 22 10 9 9 10 0;
    5 20 15 1 5 0 0 5 0;
    4 8 11 1 4 4 4 4 0;
    7 16 12 2 7 3 4 7 0;
    4 9 8 1 4 3 2 4 0;
    6 12 5 5 6 3 0 6 0;
    7 12 10 3 14 6 0 7 0;
    13 24 16 5 26 10 0 13 0;
    6 14 4 3 12 11 0 6 0;
    10 18 11 7 13 3 0 10 0;
    12 22 14 5 23 9 0 12 0;
    4 14 9 1 4 0 0 4 0;
    6 11 10 2 6 8 5 6 0;
    5 11 4 2 10 8 0 5 0;
    8 14 13 4 12 8 0 8 0;
    10 20 9 6 12 7 0 10 0;
    8 17 9 5 8 0 0 8 0;
    3 8 1 4 6 7 0 3 0;
    8 9 15 15 8 6 6 8 0;
    7 8 21 21 7 2 2 7 0;
    5 6 15 15 5 0 0 5 0;
    5 6 5 5 5 10 10 5 0;
    9 10 19 19 9 7 7 9 0;
    6 7 17 17 6 1 1 6 0;
    10 17 11 11 10 0 0 10 0;
    4 9 3 2 5 7 0 4 0;
    4 6 5 4 4 4 0 4 0;
    4 5 10 9 4 0 0 4 0;
    3 4 5 5 3 0 0 3 0;
    6 13 5 3 8 0 2 6 10;
    3 4 4 5 4 1 0 3 0;
    7 25 18 1 13 6 0 7 0;
    10 17 8 9 10 4 2 10 0;
    9 16 14 4 15 9 0 9 0;
    9 10 18 18 9 8 8 9 0;
    7 15 6 3 12 7 0 7 0;
    3 6 5 1 3 1 3 3 0;
    5 9 6 2 10 5 0 5 0;
    7 35 28 1 11 4 0 7 0;
    4 7 5 1 13 8 0 4 0;
    7 19 2 11 7 12 1 7 0;
    4 13 9 1 4 0 0 4 7;
    4 13 10 1 4 0 0 4 0;
    3 8 5 1 3 0 0 3 0;
    3 6 2 2 4 0 1 3 5;
    4 9 8 1 4 2 3 4 0;
    5 7 11 6 5 2 0 5 0;
    5 10 5 1 15 10 0 5 0;
    4 11 7 1 4 4 5 4 0;
    8 17 7 4 10 0 2 8 12;
    7 8 9 9 7 14 14 7 0;
    4 5 10 6 7 2 0 4 0;
    10 26 3 16 10 18 1 10 0;
    9 12 22 10 13 10 0 9 0;
    3 7 2 2 3 0 0 3 2;
    7 9 16 10 10 2 0 7 0;
    6 9 6 4 6 3 4 6 0;
    4 8 2 5 4 0 0 4 4;
    13 37 22 3 17 6 0 13 0;
    8 10 23 12 8 1 4 8 0;
    6 7 7 7 6 11 11 6 0;
    11 29 3 19 11 21 2 11 0;
    9 12 8 13 9 9 2 9 0;
    4 7 5 2 8 2 0 4 0;
    4 11 7 1 4 1 7 4 0;
    8 14 6 7 8 4 2 8 0;
    6 8 6 5 6 4 5 6 0;
    7 13 5 6 7 5 1 7 0;
    12 16 25 18 12 3 0 12 0;
    8 12 9 5 8 4 8 8 0;
    5 6 14 9 5 1 2 5 0;
    15 27 45 5 15 27 11 15 0;
    10 18 12 4 21 7 0 10 0;
    9 17 9 6 11 4 0 9 0;
    11 29 16 3 15 6 0 11 0;
    18 22 51 30 18 3 6 18 0;
    3 6 6 1 3 1 1 3 0;
    18 32 13 16 18 13 2 18 0;
    6 14 9 2 6 2 3 6 0;
    14 24 13 14 14 11 0 14 0;
    5 9 5 4 6 2 0 5 0;
    6 17 2 9 9 3 0 6 0;
    4 11 7 1 4 2 6 4 0;
    18 30 20 12 37 15 0 18 0;
    8 10 22 13 8 1 2 8 0;
    5 8 3 5 5 5 2 5 0;
    9 19 7 5 12 8 0 9 0;
    4 5 4 4 4 6 5 4 0;
    14 28 10 13 14 0 0 14 11;
    7 15 6 4 8 6 0 7 0;
    7 18 26 2 7 2 1 7 0;
    11 19 34 4 11 20 8 11 0;
    4 5 5 4 4 3 3 4 0;
    5 13 8 1 8 3 0 5 0;
    6 7 15 12 6 2 3 6 0;
    14 21 17 9 14 6 12 14 0;
    3 5 2 4 3 2 0 3 0;
    4 7 4 3 6 2 0 4 0;
    19 32 21 12 40 17 0 19 0;
    10 20 9 7 11 5 0 10 0;
    8 21 34 2 8 3 2 8 0;
    6 8 6 7 6 2 1 6 0;
    4 10 2 3 5 1 0 4 4;
    4 5 9 7 5 1 0 4 0;
    5 8 5 3 5 4 4 5 0;
    4 13 1 9 4 7 0 4 0;
    9 25 12 3 11 4 0 9 0;
    5 6 7 6 5 4 4 5 0;
    6 9 9 5 8 2 0 6 0;
    7 11 6 6 7 3 2 7 0;
    4 9 5 1 7 3 0 4 0;
    9 18 7 6 12 9 0 9 0;
    3 7 2 2 3 4 0 3 0;
    7 14 6 4 10 7 0 7 0;
    6 8 8 5 6 2 1 6 0;
    9 24 31 2 9 12 3 9 0;
    9 24 43 2 9 4 3 9 0;
    5 9 7 2 5 3 2 5 0;
    13 20 8 14 13 12 6 13 0;
    5 7 7 4 5 1 2 5 0;
    21 32 24 13 21 10 18 21 0;
    5 10 3 6 5 0 0 5 2;
    6 11 6 3 12 6 0 6 0;
    20 34 17 18 20 5 4 20 0;
    24 40 17 24 24 13 6 24 0;
    5 11 14 1 5 6 6 5 0;
    7 18 2 21 7 1 7 7 3;
    8 10 14 13 8 2 1 8 0;
    5 8 6 5 5 2 0 5 0;
    19 29 22 12 19 8 16 19 0;
    4 6 5 4 6 2 0 4 0;
    26 43 25 21 26 6 7 26 0;
    11 19 28 4 11 20 12 11 0;
    5 10 19 1 5 8 8 5 0;
    7 13 6 7 7 3 0 7 0;
    36 61 35 29 36 6 11 36 0;
    6 9 8 4 6 2 5 6 0;
    10 12 18 17 10 4 3 10 0;
    14 36 45 4 14 17 2 14 0;
    14 22 10 5 16 20 7 14 0;
    3 6 5 1 6 2 0 3 0;
    11 19 30 4 11 20 10 11 0;
    20 34 20 16 20 3 6 20 0;
    16 42 51 4 16 19 4 16 0;
    15 25 15 12 15 3 4 15 0;
    8 21 2 25 8 2 9 8 1;
    47 79 37 41 50 15 9 47 0;
    25 66 81 6 25 30 7 25 0;
    20 30 14 15 24 8 7 20 0]

const doughertycoefs = [
    (1,2,0),
    (1,2,3),
    (1,3,2),
    (2,3,1),
    (1,2,4),
    (1,4,2),
    (2,4,1),
    (3,4,0),
    (3,4,1)]

function mysubmod(jki::Tuple{Int,Int,Int}, σ)
    J = mymap(σ, set(jki[1]), 4)
    K = mymap(σ, set(jki[2]), 4)
    I = mymap(σ, jki[3] == 0 ? emptyset() : set(jki[3]), 4)
    submodular(4, J, K, I)
end

function doughertyrow2dualentropy(x, σ=collect(1:4))
    h = -mysubmod(doughertycoefs[1], σ) * x[1]
    for i in 2:9
        h += mysubmod(doughertycoefs[i], σ) * x[i]
    end
    h
end

function getdoughertylist4copyvars3steps(perm=true)
    m = size(doughertylist4copyvars3steps, 1)
    if perm
        list = Vector{DualEntropy{15,Int}}(24*m)
        for i in 1:m
            coefs = doughertylist4copyvars3steps[i,:]
            σ = collect(1:4)
            for j in 1:24
                list[(i-1)*24+j] = doughertyrow2dualentropy(coefs, σ)
                nextp = next_perm(σ)
                @assert (j == 24) $ nextp
            end
        end
        sort!(list)
        keep = BitSet()
        for i in 1:length(list)
            if i == 1 || list[i] != list[i-1]
                push!(keep, i)
            end
        end
        list[collect(keep)]
    else
        DualEntropy{15,Int}[doughertyrow2dualentropy(doughertylist4copyvars3steps[i,:]) for i in 1:m]
    end
end
